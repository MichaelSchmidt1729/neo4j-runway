server_uri: bolt://localhost:7687
admin_user: neo4j
admin_pass: password
database: neo4j
basepath: file:./

pre_ingest:
  - CREATE CONSTRAINT person_name IF NOT EXISTS FOR (n:Person) REQUIRE n.name IS UNIQUE;
  - CREATE CONSTRAINT toy_name IF NOT EXISTS FOR (n:Toy) REQUIRE n.name IS UNIQUE;
files:
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Person {name: row.name})
    SET n.age = row.age
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Address {})
    SET n.street = row.street, n.city = row.city
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Pet {})
    SET n.name = row.pet_name, n.kind = row.pet
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Toy {name: row.toy})
    SET n.kind = row.toy_type
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person{name: row.name})
    MATCH (target:Address{})
    MERGE (source)-[:HAS_ADDRESS]->(target)
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person{name: row.name})
    MATCH (target:Person{name: row.name})
    MERGE (source)-[:KNOWS]->(target)
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person{name: row.name})
    MATCH (target:Pet{})
    MERGE (source)-[:HAS_PET]->(target)
  url: $BASE/test
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Pet{})
    MATCH (target:Toy{name: row.toy})
    MERGE (source)-[:PLAYS_WITH]->(target)
  url: $BASE/test
